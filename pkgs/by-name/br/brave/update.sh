#!/usr/bin/env nix-shell
#!nix-shell -i bash -p curl gnused nix

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

latestVersionAarch64="$(curl -sL https://brave-browser-apt-release.s3.brave.com/dists/stable/main/binary-arm64/Packages \
    | sed -r -n 's/^Version: (.*)/\1/p' | head -n1)"
hashAarch64="$(nix hash to-sri --type sha256 \
    $(curl -sL https://brave-browser-apt-release.s3.brave.com/dists/stable/main/binary-arm64/Packages \
    | sed -r -n 's/^SHA256: (.*)/\1/p' | head -n1)
)"

latestVersionAmd64="$(curl -sL https://brave-browser-apt-release.s3.brave.com/dists/stable/main/binary-amd64/Packages \
    | sed -r -n 's/^Version: (.*)/\1/p' | head -n1)"
hashAmd64="$(nix hash to-sri --type sha256 \
    $(curl -sL https://brave-browser-apt-release.s3.brave.com/dists/stable/main/binary-amd64/Packages \
    | sed -r -n 's/^SHA256: (.*)/\1/p' | head -n1)
)"

latestVersionDarwin="$(curl -sL https://api.github.com/repos/brave/brave-browser/releases/latest \
    | grep -o '"tag_name": "v[^"]*"' | cut -d'"' -f4 | sed 's/^v//')"

hashDarwinUniversal="$(nix hash to-sri --type sha256 \
    $(curl -sL https://api.github.com/repos/brave/brave-browser/releases/latest \
    | grep -o '"browser_download_url": "[^"]*universal.dmg"' \
    | cut -d'"' -f4 \
    | xargs nix-prefetch-url)
)"

# Generate the Linux package file
cat > $SCRIPT_DIR/package.nix << EOF
# Expression generated by update.sh; do not edit it by hand!
{ stdenv, callPackage, ... }@args:

if stdenv.hostPlatform.isDarwin
then callPackage ./brave-darwin.nix (removeAttrs args [ "callPackage" ])
else callPackage ./make-brave.nix (removeAttrs args [ "callPackage" ])
  (
    if stdenv.hostPlatform.isAarch64 then
      rec {
        pname = "brave";
        version = "${latestVersionAarch64}";
        url = "https://github.com/brave/brave-browser/releases/download/v\${version}/brave-browser_\${version}_arm64.deb";
        hash = "${hashAarch64}";
        platform = "aarch64-linux";
      }
    else if stdenv.hostPlatform.isx86_64 then
      rec {
        pname = "brave";
        version = "${latestVersionAmd64}";
        url = "https://github.com/brave/brave-browser/releases/download/v\${version}/brave-browser_\${version}_amd64.deb";
        hash = "${hashAmd64}";
        platform = "x86_64-linux";
      }
    else
      throw "Unsupported platform."
  )
EOF

# Generate the Darwin package file
cat > $SCRIPT_DIR/brave-darwin.nix << EOF
{ lib
, stdenv
, fetchurl
, _7zz
}:

stdenv.mkDerivation (finalAttrs: {
  pname = "brave";
  version = "${latestVersionDarwin}";

  src = fetchurl {
    url = "https://github.com/brave/brave-browser/releases/download/v\${finalAttrs.version}/Brave-Browser-universal.dmg";
    hash = "${hashDarwinUniversal}";
  };
  sourceRoot = ".";

  nativeBuildInputs = [ _7zz ];
  passthru.updateScript = ./update.sh;

  dontConfigure = true;
  dontBuild = true;
  installPhase = ''
    runHook preInstall
    mkdir -p \$out/Applications
    cp -r "Brave Browser.app" \$out/Applications
    runHook postInstall
  '';

  meta = (import ./meta.nix { inherit lib; version = finalAttrs.version; }) // {
    maintainers = with lib.maintainers; [ ];
    platforms = lib.platforms.darwin;
  };
})
EOF
